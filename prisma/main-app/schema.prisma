generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "fullTextSearch", "fullTextIndex"]
  output          = "../../node_modules/@prisma/prisma-main-client"
}

datasource db {
  provider = "mysql"
  url      = env("MAIN_DB_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String
  profile     Profile?
  mediaLink   Media_Link[]
  followings  Follow[]     @relation("follower_user")
  followers   Follow[]     @relation("following_user")
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  blacklist   Blacklist?   @relation("blacklist_owner")
  inBlacklist Blacklist[]  @relation("blacklist_user")
}

model Profile {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  name      String?
  dob       DateTime?
  country   String?
  gender    String?
  avatar    String?
  alias     String?   @unique
  bio       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Media_Link {
  id     String   @id @default(cuid())
  userId String
  type   LinkType
  link   String?
  user   User     @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("follower_user", fields: [followerId], references: [id])
  following   User     @relation("following_user", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Blacklist {
  id        String   @id @default(cuid())
  ownerId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation("blacklist_owner", fields: [ownerId], references: [id])
  list      User[]   @relation("blacklist_user")
}

model Post {
  id          String    @id @default(cuid())
  userId      String
  content     String?
  share       Int       @default(0)
  scope       PostScope @default(PUBLIC)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  medias      Media[]
  tags        Tag[]
  source      String?
  sourcePost  Post?     @relation("SharedPost", fields: [source], references: [id])
  sharedPosts Post[]    @relation("SharedPost")
  author      User      @relation(fields: [userId], references: [id])
  likes       Like[]
  Comment     Comment[]

  @@fulltext([content])
}

model Media {
  id       Int       @id @default(autoincrement())
  postId   String
  url      String
  type     MediaType
  width    Int?
  height   Int?
  duration Int?
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  posts     Post[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  for       LikeFor
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Comment {
  id        String    @id @default(cuid())
  userId    String
  postId    String
  content   String
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parentId  String?
  replies   Comment[] @relation("Replies_Comment")
  comment   Comment?  @relation("Replies_Comment", fields: [parentId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum PostScope {
  PUBLIC
  PRIVATE
}

enum LinkType {
  FACEBOOK
  GOOGLE
}

enum LikeFor {
  POST
  COMMENT
}
